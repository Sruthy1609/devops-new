ECS BY GITHUB ACTION

#########################
create ecs 

create cluster (farget)
 create task definition

###############
create role 
AdministratorAceess
amazonec2containerregistryfullaccess
amazonecstaskexecutionrolepolicy


###########################################

continer name 
image uri


create cluster
infra -> fargate
create

create task definition
infra -> aws fargate
task role -> create new if not created or choose "Create new role"
container:
give container name -- ecr image uri -- yes
create

goto your cluster -> service
create service
capacity provider strategy
family -> choose your task
depl. config type -> service
give service name
networking -> choose your security group
create

goto your tasks -> json
copy whole file
goto GitHub -> create new file -> (file name: reg-app-task-definition.json)
paste the content here
commit changes

goto GitHub actions -> java with maven -> replace the file with this
name: cicd.yml:


WORK FLOW
#####################################################################################################################################

name: CICD

on: 
  push:
    branches: [ main ]
 
jobs:
  build-and-deploy:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'
      - name: Set up JDK 14
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Build project with Maven
        run: mvn -B package --file pom.xml    
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true' 
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: reg-app
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: reg-app-task-definition.json
          container-name: reg-app
          image: ${{ steps.build-image.outputs.image }}    
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: reg-app-service
          cluster: DevCluster-reg-app
          wait-for-service-stability: true

##################
lineno.
16 -> change region
38 -> ecr repo name
48 -> task definition (GitHub file .json name)
49 -> container: your_container_name(inside the service)
55 -> service: your_service_name
56 -> cluster: your_cluster_name_ecs

wait for the build in GitHub actions

copy public ip:
goto your ecs cluster
goto your service -> tasks -> running task -> public ip (under configuration)
paste in browser : 8080/webapp

