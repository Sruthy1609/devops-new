***deploy kubectl using GitHub actions***

1. create ec2 Kubernetes for making eks cluster.
2. create role with ec2fullaccess, eksfullaccess, iamfullaccess, administratoraccess.
3. attach the role with ec2.
4. create GitHub repo consisting of files pom.xml, service.yml, deployment.yml, webapp/src/main/webapp/index.jsp
5. create ecr -> create repository.
6. goto repo settings -> secrets and variables -> actions -> new repository secret.

name -> AWS_ACCESS_KEY_ID
value -> user_access_id

add another secret
name -> AWS_SECRET_ACCESS_KEY
value -> user_secret_id

-------------------
dockerfile:

FROM tomcat:latest
RUN cp -R  /usr/local/tomcat/webapps.dist/*  /usr/local/tomcat/webapps
COPY /webapp/target/*.war /usr/local/tomcat/webapps
RUN  ls -la /usr/local/tomcat/webapps/

-------------------


7. in GitHub goto actions -> new workflow -> configure java with maven -> replace file content with this:
----------------------
name: Deploy to ECR
on:
 
  push:
 
    branches: [ main ]
env:
 
  ECR_REPOSITORY: ecr-new-ecr
 
  EKS_CLUSTER_NAME: my-cluster
 
  AWS_REGION: ap-south-1
jobs:
 
  build:
 
    name: Deployment
 
    runs-on: ubuntu-latest
    steps:
    - name: Set short git commit SHA
 
      id: commit
 
      uses: prompt/actions-commit-hash@v2
    - name: Check out code
 
      uses: actions/checkout@v2
 
    - name: Set up JDK 17
 
      uses: actions/setup-java@v4
 
      with:
 
        java-version: '17'
 
        distribution: 'temurin'
 
        cache: maven
 
    - name: Build with Maven
 
      run: mvn -B package --file pom.xml
 
    - name: Configure AWS credentials
 
      uses: aws-actions/configure-aws-credentials@v1
 
      with:
 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 
        aws-region: ${{env.AWS_REGION}}
    - name: Login to Amazon ECR
 
      id: login-ecr
 
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
 
      env:
 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
 
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
 
      run: |
 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile .
 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    - name: Update kube config
 
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
    - name: Deploy to EKS
 
      env:
 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
 
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
 
      run: |
 
        kubectl apply -f regapp-deploy.yml
        kubectl apply -f regapp-service.yml

------------------

8. create deployment.yml:

apiVersion: apps/v1 
kind: Deployment
metadata:
  name: regapp-deployment
  labels: 
     app: regapp
 
spec:
  replicas: 2 
  selector:
    matchLabels:
      app: regapp
 
  template:
    metadata:
      labels:
        app: regapp
    spec:
      containers:
      - name: regapp
        image: <your_ecr_image>         # after running the workflow for first time
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

------------------

9. create service.yml:

apiVersion: v1
kind: Service
metadata:
  name: regapp-service
  labels:
    app: regapp 
spec:
  selector:
    app: regapp
 
  ports:
    - port: 8080
      targetPort: 8080
 
  type: LoadBalancer
-------------------


10. change in deployment.yml to be reflected by changing the commands in workflow (main.yml)

comment the lines:
# kubectl apply -f regapp-deploy.yml
# kubectl apply -f regapp-service.yml

add:
kubectl rollout restart deployment/<your_deployment_name>			#(to update your deployment)

kubectl get svc
then copy the external link and paste in browser

